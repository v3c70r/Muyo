// ray gen shader
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "Camera.h"
CAMERA_UBO(0)

layout(set = 1, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = 1, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT vec3 vResColor;


void main()
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2       d           = inUV * 2.0 - 1.0;

  vec4 originWorld    = uboCamera.viewInv * vec4(0.0, 0.0, 0.0, 1.0);
  vec3 directionView = mix(uboCamera.vLT, uboCamera.vRB, vec3(inUV, 1.0));
  vec3 directionWorld = (uboCamera.viewInv * vec4(directionView, 0.0)).xyz;
  directionWorld = normalize(directionWorld);

  //vec4 origin    = vec4(0.0, 0.0, 1.0, 0.0);
  //vec4 target    = vec4(0.0, 0.0, 1.0, 1.0);
  //vec4 direction = vec4(target.xyz, 0.0);

  uint  rayFlags = gl_RayFlagsOpaqueEXT;
  float tMin     = 0.1;
  float tMax     = 100.0;

  traceRayEXT(topLevelAS,     // acceleration structure
              gl_RayFlagsOpaqueEXT,       // rayFlags
              0xFF,           // cullMask
              0,              // sbtRecordOffset
              0,              // sbtRecordStride
              0,              // missIndex
              originWorld.xyz,     // ray origin
              tMin,           // ray min range
              directionWorld.xyz,  // ray direction
              tMax,           // ray max range
              0               // payload (location = 0)
  );
  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(normalize(vResColor.xyz), 1.0));
}
