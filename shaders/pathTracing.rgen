// ray gen shader
#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "Camera.h"
CAMERA_UBO(0)

#include "pathTracingPayload.h"
#include "random.h"

layout(set = 1, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = 1, rgba32f) uniform image2D image;

layout(location = 0) rayPayloadEXT RayPayload ray;


// Reference
// https://github.com/GPSnoopy/RayTracingInVulkan/tree/master/assets/shaders

void main()
{
  const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(0.5);
  const vec2 inUV        = pixelCenter / vec2(gl_LaunchSizeEXT.xy);
  vec2       d           = inUV * 2.0 - 1.0;

  vec4 originWorld    = uboCamera.viewInv * vec4(0.0, 0.0, 0.0, 1.0);
  vec3 directionView = mix(uboCamera.vLT, uboCamera.vRB, vec3(inUV, 1.0));
  vec3 directionWorld = (uboCamera.viewInv * vec4(directionView, 0.0)).xyz;
  directionWorld = normalize(directionWorld);

  vec4 target = uboCamera.projInv * vec4(d.x, d.y, 1, 1);
  vec4 direction = uboCamera.viewInv * vec4(normalize(target.xyz), 0);
  directionWorld = direction.xyz;

  uint  rayFlags = gl_RayFlagsOpaqueEXT;

  


  // shoot multiple rays from a pixel
  const int NUM_SAMPLES = 3;
  vec3 vPixelColor = vec3(0.0);
  ray.uRandomSeed = InitRandomSeed(InitRandomSeed(gl_LaunchIDEXT.x, gl_LaunchIDEXT.y), uboCamera.uFrameId);
  for (uint nSample = 0; nSample < NUM_SAMPLES; nSample++)
  {
      const uint MAX_DEPTH = 3;
      vec3 vRayColor = vec3(1.0f);
      vec3 vOrigin = originWorld.xyz;
      vec3 vDirection = directionWorld.xyz;

      for (uint nDepth = 0; nDepth <= MAX_DEPTH; nDepth++)
      {
          const float tMin = 0.1;
          const float tMax = 100.0;

          if (nDepth == MAX_DEPTH)
          {
              vRayColor = vec3(0.0f);
              break;
          }

          traceRayEXT(topLevelAS,            // acceleration structure
                      gl_RayFlagsOpaqueEXT,  // rayFlags
                      0xFF,                  // cullMask
                      0,                     // sbtRecordOffset
                      0,                     // sbtRecordStride
                      0,                     // missIndex
                      vOrigin,               // ray origin
                      tMin,                  // ray min range
                      vDirection,            // ray direction
                      tMax,                  // ray max range
                      0                      // payload (location = 0)
          );
          const vec3 hitColor = ray.vColorAndDistance.rgb;
          const float t = ray.vColorAndDistance.r;
          const bool bIsScattered = ray.vScatterDirection.w > 0;

          vRayColor *= hitColor;

          if (t < 0 || !bIsScattered)
          {
              break;
          }

          vOrigin = vOrigin + t * vDirection;
          vDirection = ray.vScatterDirection.xyz;
      }
      vPixelColor += vRayColor;
  }

  imageStore(image, ivec2(gl_LaunchIDEXT.xy), vec4(vPixelColor.xyz, 1.0));
}
